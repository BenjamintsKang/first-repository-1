import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:google_ml_kit/google_ml_kit.dart';
import 'package:schedule/providers/image_provider.dart'; // 이미지 프로바이더 추가
import 'package:flutter/services.dart'; // 클립보드 작업을 위해 추가

class DetailPage extends StatefulWidget {
  static const routeName = '/detail';

  @override
  _DetailPageState createState() => _DetailPageState();
}

class _DetailPageState extends State<DetailPage> {
  TextEditingController _textController = TextEditingController();
  int _currentIndex = 0;
  final ImagePicker _picker = ImagePicker();

  Future<void> _pickImageFromCamera() async {
    final XFile? image = await _picker.pickImage(source: ImageSource.camera);
    if (image != null) {
      Provider.of<ImageProviderModel>(context, listen: false).addImage(File(image.path));
    }
  }

  Future<void> _pickImageFromGallery() async {
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      Provider.of<ImageProviderModel>(context, listen: false).addImage(File(image.path));
    }
  }

  Future<void> _recognizeText(File image) async {
    final inputImage = InputImage.fromFilePath(image.path);
    final textRecognizer = GoogleMlKit.vision.textRecognizer();
    final RecognizedText recognizedText = await textRecognizer.processImage(inputImage);
    await textRecognizer.close();

    // Text를 읽고 빈 줄을 제거합니다
    String scannedText = _removeExtraNewLines(recognizedText.text);

    setState(() {
      _textController.text = scannedText;
    });
  }

  // 빈 줄 제거 함수
  String _removeExtraNewLines(String text) {
    return text
        .trim() // 양 끝의 공백 제거
        .replaceAll(RegExp(r'\n\s*\n'), '\n') // 연속된 빈 줄을 하나의 빈 줄로 교체
        .replaceAll(RegExp(r'\n+$'), ''); // 마지막에 있는 빈 줄 제거
  }

  void _copyToClipboard() {
    Clipboard.setData(ClipboardData(text: _textController.text));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('텍스트가 클립보드에 복사되었습니다.'),
      ),
    );
  }

  void showImageDialog(int index, ImageProviderModel imageProvider) {
    setState(() {
      _currentIndex = index;
      _textController.text = imageProvider.descriptions[index];
    });
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          child: StatefulBuilder(
            builder: (BuildContext context, StateSetter setState) {
              return SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        if (_currentIndex > 0)
                          IconButton(
                            icon: Icon(Icons.arrow_back),
                            onPressed: () {
                              setState(() {
                                _currentIndex--;
                                _textController.text = imageProvider.descriptions[_currentIndex];
                              });
                            },
                          ),
                        if (_currentIndex < imageProvider.images.length - 1)
                          IconButton(
                            icon: Icon(Icons.arrow_forward),
                            onPressed: () {
                              setState(() {
                                _currentIndex++;
                                _textController.text = imageProvider.descriptions[_currentIndex];
                              });
                            },
                          ),
                      ],
                    ),
                    Image.file(imageProvider.images[_currentIndex]),
                    SingleChildScrollView(
                      scrollDirection: Axis.vertical,
                      child: TextField(
                        controller: _textController,
                        maxLines: null, // 여러 줄 입력 가능
                        decoration: InputDecoration(hintText: "이미지에 대한 설명을 입력하세요"),
                      ),
                    ),
                    SizedBox(height: 10),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        ElevatedButton(
                          onPressed: () {
                            // 저장 버튼 눌렀을 때, 텍스트 저장
                            imageProvider.updateDescription(_currentIndex, _textController.text);
                            Navigator.of(context).pop();
                          },
                          child: Text('저장'),
                        ),
                        ElevatedButton(
                          onPressed: () async {
                            await _recognizeText(imageProvider.images[_currentIndex]);
                          },
                          child: Text('OCR'),
                        ),
                        ElevatedButton(
                          onPressed: _copyToClipboard,
                          child: Text('복사'),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            },
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final date = ModalRoute.of(context)!.settings.arguments as DateTime;
    final imageProvider = Provider.of<ImageProviderModel>(context);

    return Scaffold(
      appBar: AppBar(
        title: Text('상세 페이지'),
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                '${date.toLocal()}'.split(' ')[0],
                style: TextStyle(fontSize: 18),
              ),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton.icon(
                  onPressed: _pickImageFromCamera,
                  icon: Icon(Icons.camera_alt),
                  label: Text('카메라'),
                ),
                SizedBox(width: 10),
                ElevatedButton.icon(
                  onPressed: _pickImageFromGallery,
                  icon: Icon(Icons.photo),
                  label: Text('갤러리'),
                ),
              ],
            ),
            SizedBox(height: 20),
            GridView.builder(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
                crossAxisSpacing: 8,
                mainAxisSpacing: 8,
              ),
              itemCount: imageProvider.images.length,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () => showImageDialog(index, imageProvider),
                  child: Stack(
                    children: [
                      Container(
                        width: double.infinity,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(8.0),
                          image: DecorationImage(
                            image: FileImage(imageProvider.images[index]),
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
                      Positioned(
                        top: 0,
                        right: 0,
                        child: IconButton(
                          padding: EdgeInsets.all(4),
                          constraints: BoxConstraints(),
                          icon: Icon(Icons.close, color: Colors.white, size: 20),
                          onPressed: () => imageProvider.removeImage(index),
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
